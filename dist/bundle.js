/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Ball.ts":
/*!*********************!*\
  !*** ./src/Ball.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Ball)\n/* harmony export */ });\n/* harmony import */ var _Game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Game */ \"./src/Game.ts\");\n\n/**\n * @module Ball\n * The Ball class represents a ball in the game.\n */\nclass Ball {\n    /**\n     * Creates a new Ball instance.\n     * @param {Color} [colorOverride] - Optional color to override the default random color\n     */\n    constructor(colorOverride) {\n        // Create a new div element for the ball\n        this.element = document.createElement(\"div\");\n        this.element.classList.add(\"ball\");\n        // Set the ball's color, either from the override or randomly from the game's colors\n        this.color = colorOverride !== null && colorOverride !== void 0 ? colorOverride : _Game__WEBPACK_IMPORTED_MODULE_0__[\"default\"].colors[Math.floor(Math.random() * _Game__WEBPACK_IMPORTED_MODULE_0__[\"default\"].colors.length)];\n        this.element.style.backgroundColor = this.color;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/Ball.ts?");

/***/ }),

/***/ "./src/Game.ts":
/*!*********************!*\
  !*** ./src/Game.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Ball__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Ball */ \"./src/Ball.ts\");\n\n/**\n * @module Game\n * The Game class handles the main logic of the game, including creating cells, handling clicks, and pathfinding.\n */\nclass Game {\n    /**\n     * Creates the cells for the game grid and sets up event listeners.\n     * @event click - Handles cell clicks to select or move balls.\n     * @event mouseover - Highlights possible paths for the selected ball.\n     */\n    static createCells() {\n        for (let i = 0; i < Game.size; i++) {\n            for (let j = 0; j < Game.size; j++) {\n                const cell = document.createElement(\"div\");\n                cell.classList.add(\"cell\");\n                // Add click event listener to handle cell clicks\n                cell.addEventListener(\"click\", () => Game.handleClicks(cell, { x: i, y: j }));\n                // Add mouseover event listener to highlight possible paths\n                cell.addEventListener(\"mouseover\", () => {\n                    if (Game.selected) {\n                        const path = Game.getPath(Game.selectedIndex, { x: i, y: j });\n                        Game.cells.forEach((row) => {\n                            row.forEach((cell) => {\n                                cell.style.backgroundColor = \"#2e2e2e\";\n                            });\n                        });\n                        // Highlight the path if it exists\n                        if (path.found && path.path.length > 1) {\n                            path.path.forEach(({ x, y }) => {\n                                Game.cells[x][y].style.backgroundColor = \"rgba(0, 255, 0, 0.5)\";\n                            });\n                        }\n                    }\n                });\n                Game.cells[i][j] = cell;\n                Game.box.appendChild(cell);\n            }\n        }\n    }\n    /**\n     * Randomly places new balls on the game grid.\n     */\n    static randomCells() {\n        const obstacles = [];\n        const preview = document.getElementById(\"nextBalls\");\n        // Initialize preview balls if not alreaincrY present\n        if (preview.children.length == 0) {\n            for (let i = 0; i < Game.ballCount; i++) {\n                let previewBall = document.createElement(\"div\");\n                previewBall.classList.add(\"ball\");\n                preview.appendChild(previewBall);\n                Game.nextBalls.push(previewBall);\n            }\n        }\n        let tryCounter = 0;\n        for (let i = Game.ballCount; i > 0; i--) {\n            const rand = [Math.floor(Math.random() * Game.size), Math.floor(Math.random() * Game.size)];\n            if (Game.field[rand[0]][rand[1]] == 0) {\n                tryCounter = 0;\n                obstacles.push(rand);\n                Game.field[rand[0]][rand[1]] = 1;\n                const ball = new _Ball__WEBPACK_IMPORTED_MODULE_0__[\"default\"](Game.nextColors.pop());\n                Game.cells[rand[0]][rand[1]].appendChild(ball.element);\n            }\n            else if (tryCounter > Game.size * Game.size) {\n                // If too manewY attempts to place a ball, check for empty cells\n                let emptyCells = 0;\n                Game.field.forEach((row) => {\n                    row.forEach((cell) => {\n                        if (cell == 0)\n                            emptyCells++;\n                    });\n                });\n                if (emptyCells == 0) {\n                    Game.end();\n                    return;\n                }\n            }\n            else {\n                i++;\n                tryCounter++;\n            }\n        }\n        // Generate next colors for preview balls\n        Game.nextColors = Array(Game.ballCount).fill(\"transparent\");\n        for (let i = 0; i < Game.ballCount; i++) {\n            Game.nextColors[i] = Game.colors[Math.floor(Math.random() * Game.colors.length)];\n            Game.nextBalls[i].style.backgroundColor = Game.nextColors[i];\n        }\n        Game.popFives();\n    }\n    /**\n     * Checks for sequences of 5 or more balls of the same color and removes them.\n     * @returns {boolean} - Whether any balls were removed\n     */\n    static popFives() {\n        const ballColors = Array.from({ length: Game.size }, () => Array(Game.size).fill(null));\n        const toDelete = new Set();\n        let popped = false;\n        // Populate ballColors array with the colors of the balls in each cell\n        Game.cells.forEach((row, i) => {\n            row.forEach((cell, j) => {\n                const child = cell.firstChild ? cell.firstChild.style.backgroundColor : null;\n                ballColors[i][j] = child;\n            });\n        });\n        // Directions for horizontal, vertical, and diagonal checks\n        const directions = [\n            { x: 1, y: 0 }, // horizontal\n            { x: 0, y: 1 }, // vertical\n            { x: 1, y: 1 }, // diagonal right\n            { x: 1, y: -1 } // diagonal left\n        ];\n        /**\n         * Checks a specific direction for sequences of 5 or more balls of the same color.\n         * @param x - Starting x coordinate\n         * @param y - Starting y coordinate\n         * @param incrX - Direction x increment\n         * @param incrY - Direction y increment\n         */\n        const checkDirection = (x, y, incrX, incrY) => {\n            const color = ballColors[x][y];\n            if (!color)\n                return;\n            let count = 0;\n            const tempDelete = [];\n            // Check for sequences of the same color in the specified direction\n            for (let i = 0; i < 5; i++) {\n                const newX = x + i * incrX;\n                const newY = y + i * incrY;\n                if (newX >= 0 && newX < Game.size && newY >= 0 && newY < Game.size && ballColors[newX][newY] == color) {\n                    tempDelete.push({ x: newX, y: newY });\n                    count++;\n                }\n                else {\n                    break;\n                }\n            }\n            // If a sequence of 5 or more is found, mark them for deletion\n            if (count >= 5) {\n                tempDelete.forEach(({ x, y }) => toDelete.add(`${x},${y}`));\n            }\n        };\n        // Check all cells in all directions\n        for (let i = 0; i < Game.size; i++) {\n            for (let j = 0; j < Game.size; j++) {\n                directions.forEach(({ x, y }) => checkDirection(i, j, x, y));\n            }\n        }\n        // Mark cells for deletion in the field array\n        toDelete.forEach((key) => {\n            const [x, y] = key.split(',').map(Number);\n            Game.field[x][y] = -1;\n            Game.cells[x][y].style.backgroundColor = \"rgba(255, 0, 0, 0.5)\";\n            setTimeout(() => {\n                Game.cells[x][y].style.backgroundColor = \"#2e2e2e\";\n            }, 750);\n            popped = true; // At least one ball was removed\n        });\n        // Remove balls from the marked cells and update the points\n        for (let i = 0; i < Game.size; i++) {\n            for (let j = 0; j < Game.size; j++) {\n                if (Game.field[i][j] == -1) {\n                    Game.cells[i][j].innerHTML = \"\"; // Remove the ball from the cell (it's not text)\n                    Game.field[i][j] = 0;\n                    Game.points++;\n                }\n            }\n        }\n        document.getElementById(\"pointsNumber\").innerText = String(Game.points);\n        // Check if there are any empty cells left and end the game if not\n        let emptyCells = 0;\n        Game.field.forEach((row) => {\n            row.forEach((cell) => {\n                if (cell == 0)\n                    emptyCells++;\n            });\n        });\n        if (emptyCells == 0) {\n            Game.end();\n        }\n        return popped;\n    }\n    /**\n     * Handles click events on the game cells.\n     * @param clicked - The clicked cell element\n     * @param coords - The coordinates of the clicked cell\n     */\n    static handleClicks(clicked, coords) {\n        // Reset the size of all balls\n        [...document.querySelectorAll(\".ball\")].forEach(ball => {\n            ball.style.height = \"40px\";\n            ball.style.width = \"40px\";\n        });\n        const ball = clicked.querySelector(\".ball\");\n        if (ball) {\n            // If the clicked cell contains a ball, select or deselect it\n            if (Game.selected == ball) {\n                Game.selected = null;\n                Game.selectedIndex = null;\n                clicked.style.backgroundColor = \"#2e2e2e\";\n            }\n            else if (Game.checkMovement(ball)) {\n                Game.selected = ball;\n                Game.selectedIndex = coords;\n                clicked.style.backgroundColor = \"#2e2e2e\";\n                Game.selected.style.height = \"50px\";\n                Game.selected.style.width = \"50px\";\n            }\n        }\n        else if (Game.selected) {\n            // If a ball is selected and an empty cell is clicked, move the ball\n            const path = Game.getPath(Game.selectedIndex, coords);\n            if (path.found) {\n                clicked.appendChild(Game.selected);\n                Game.field[coords.x][coords.y] = 1;\n                Game.field[Game.selectedIndex.x][Game.selectedIndex.y] = 0;\n                // Highlight the path taken by the ball\n                path.path.forEach(({ x, y }) => {\n                    Game.cells[x][y].style.backgroundColor = \"rgba(128, 128, 128, 0.5)\";\n                });\n                const popped = Game.popFives();\n                console.log(popped);\n                Game.box.style.pointerEvents = \"none\";\n                setTimeout(() => {\n                    path.path.forEach(({ x, y }) => {\n                        Game.cells[x][y].style.backgroundColor = \"#2e2e2e\";\n                    });\n                    if (!popped)\n                        Game.randomCells();\n                    Game.box.style.pointerEvents = \"all\";\n                }, 750);\n                Game.selected = null;\n                Game.selectedIndex = null;\n            }\n            else {\n                Game.selected = null;\n                Game.selectedIndex = null;\n                clicked.style.backgroundColor = \"#2e2e2e\";\n            }\n        }\n    }\n    /**\n     * Finds a path from the start coordinates to the end coordinates using BFS.\n     * @param start - The starting coordinates\n     * @param end - The ending coordinates\n     * @returns The pathfinding result containing the path and whether it was found\n     */\n    static getPath(start, end) {\n        // Directions for up, down, left, and right\n        const directions = [\n            { x: 0, y: 1 },\n            { x: 0, y: -1 },\n            { x: 1, y: 0 },\n            { x: -1, y: 0 }\n        ];\n        const queue = [[start, []]];\n        const visited = new Set(); // Because sets don't like objects\n        while (queue.length > 0) {\n            const [current, path] = queue.shift();\n            const { x, y } = current;\n            // If the end coordinates are reached, return the path\n            if (x == end.x && y == end.y) {\n                return {\n                    path: [...path, current],\n                    found: true\n                };\n            }\n            visited.add(`${x},${y}`);\n            // Explore all possible directions\n            for (const { x: incrX, y: incrY } of directions) {\n                const newX = x + incrX;\n                const newY = y + incrY;\n                if (newX >= 0 && newX < Game.size && newY >= 0 && newY < Game.size && !visited.has(`${newX},${newY}`) && Game.field[newX][newY] == 0) {\n                    queue.push([{ x: newX, y: newY }, [...path, current]]);\n                }\n            }\n        }\n        return {\n            path: [],\n            found: false\n        };\n    }\n    /**\n     * Checks if the movement of the ball is valid.\n     * @param ball - The ball element to check\n     * @returns {boolean} - Whether the movement is valid\n     */\n    static checkMovement(ball) {\n        const ballCoords = Game.cells.flat().findIndex(cell => cell.contains(ball)); // TIL flat() is a thing\n        const ballX = Math.floor(ballCoords / Game.size);\n        const ballY = ballCoords % Game.size;\n        const directions = [\n            { x: 0, y: 1 },\n            { x: 0, y: -1 },\n            { x: 1, y: 0 },\n            { x: -1, y: 0 }\n        ];\n        for (const { x: incrX, y: incrY } of directions) {\n            const newX = ballX + incrX;\n            const newY = ballY + incrY;\n            if (newX >= 0 && newX < Game.size && newY >= 0 && newY < Game.size && Game.field[newX][newY] == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Ends the game and displays the end game animation and message.\n     */\n    static end() {\n        document.body.style.pointerEvents = \"none\";\n        Game.cells.forEach((row) => {\n            row.forEach((cell) => {\n                const oldElement = cell;\n                const newElement = oldElement.cloneNode(true);\n                oldElement.parentNode.replaceChild(newElement, oldElement);\n            });\n        });\n        const sidebar = document.getElementById(\"sidebar\");\n        Game.box.style.animation = \"szmol 45s forwards\";\n        sidebar.style.animation = \"fin 2s linear forwards\";\n        const loseTitle = document.getElementById(\"loseTitle\");\n        loseTitle.style.display = \"block\";\n        loseTitle.innerHTML = `<span class=\"headerTop\">Koniec gry!</span><br>Zdobyte punkty: ${Game.points}`;\n    }\n}\n/**\n * The size of the game grid.\n * @type {number}\n * @readonly\n */\nGame.size = 9;\n/**\n * The number of obstacles (balls) to place randomly on the grid.\n * @type {number}\n * @readonly\n */\nGame.ballCount = 3;\n/**\n * The available colors for the balls.\n * @type {Color[]}\n * @readonly\n */\nGame.colors = [\"black\", \"white\", \"red\", \"lime\", \"blue\", \"orange\", \"yellow\"];\n/**\n * The HTML element representing the game grid.\n * @type {HTMLDivElement}\n * @readonly\n * @private\n */\nGame.box = document.getElementById(\"box\");\n/**\n * The 2D array of HTML elements representing the cells of the game grid.\n * @type {HTMLDivElement[][]}\n * @readonly\n * @private\n */\nGame.cells = Array.from({ length: Game.size }, () => Array(Game.size).fill([]));\n/**\n * The 2D array representing the state of the game grid.\n * @type {number[][]}\n * @private\n */\nGame.field = Array.from({ length: Game.size }, () => Array(Game.size).fill(0));\n/**\n * The currently selected ball element.\n * @type {HTMLDivElement | null}\n * @private\n */\nGame.selected = null;\n/**\n * The coordinates of the currently selected ball.\n * @type {Coordinates | null}\n * @private\n */\nGame.selectedIndex = null;\n/**\n * The colors of the next balls to be placed on the grid.\n * @type {Color[]}\n * @private\n */\nGame.nextColors = [];\n/**\n * The HTML elements representing the next balls to be placed on the grid.\n * @type {HTMLDivElement[]}\n * @private\n */\nGame.nextBalls = [];\n/**\n * The current score of the game.\n * @type {number}\n * @private\n */\nGame.points = 0;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Game);\n\n\n//# sourceURL=webpack:///./src/Game.ts?");

/***/ }),

/***/ "./src/script.ts":
/*!***********************!*\
  !*** ./src/script.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Game */ \"./src/Game.ts\");\n\n// Ensure the DOM is fully loaded before initializing the game\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    _Game__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createCells();\n    _Game__WEBPACK_IMPORTED_MODULE_0__[\"default\"].randomCells();\n});\n\n\n//# sourceURL=webpack:///./src/script.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/script.ts");
/******/ 	
/******/ })()
;